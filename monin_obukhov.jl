using RootSolvers
using GLMakie

struct LaminarLayerLength{FT}
    viscosity :: FT
    coefficient :: FT
end

struct SurfaceWaveLength{FT}
    gravitational_acceleration :: FT
    coefficient :: FT
end

@inline function (‚Ñì::LaminarLayerLength)(u‚òÖ)
    C = ‚Ñì.coefficient
    ŒΩ = ‚Ñì.viscosity
    return C * ŒΩ / u‚òÖ
end

@inline function (‚Ñì::SurfaceWaveLength)(u‚òÖ) 
    Œ± = ‚Ñì.coefficient
    g = ‚Ñì.gravitational_acceleration
    return Œ± * u‚òÖ^2 / g
end

struct CombinedLengthScale{N, O, L}
    op :: O
    length_scales :: L

    function CombinedLengthScale(op, length_scales...)
        length_scales = tuple(length_scales...)
        N = length(length_scales)
        O = typeof(op)
        L = typeof(length_scales)
        return new{N, O, L}(op, length_scales)
    end
end

@inline function (cls::CombinedLengthScale{N})(u‚òÖ) where N
    ‚Ñìs = cls.length_scales    
    ‚Ñì‚ÇÅ = ‚Ñìs[1]
    s = ‚Ñì‚ÇÅ(u‚òÖ)
    ntuple(Val(N-1)) do n
        ‚Ñì‚Å∫ = ‚Ñìs[n+1](u‚òÖ)
        s = cls.op(s, ‚Ñì‚Å∫)
    end
    return s
end

struct MoistAirState{Q, T, U, V}
    q :: Q
    Œ∏ :: T
    u :: U
    v :: V
end

MoistAirState(q, Œ∏, u) = MoistAirState(q, Œ∏, u, nothing)

Base.@kwdef struct SimilarityParameters{FT}
    gravitational_acceleration :: FT = 9.81
    von_karman_constant :: FT = 0.4
    molar_mass_ratio = 1.61
end

struct UniversalFunction{FT}
    a :: FT
    b :: FT
    c :: FT
end

@inline function (œà::UniversalFunction)(Ri)
    a = œà.a
    b = œà.b
    c = œà.c

    œï‚Åª¬π = (1 - b * Ri)^c
    œà_unstable = log((1 + œï‚Åª¬π)^2 * (1 + œï‚Åª¬π^2) / 8) - 2 * atan(œï‚Åª¬π) + œÄ/2
    œà_stable = - a * Ri
    return ifelse(Ri < 0, œà_unstable, œà_stable)
end



#=
Base.@kwdef struct Businger{FT}
    au :: FT = 4.7
    bu :: FT = 15.0
    cu :: FT = 0.25
    ac :: FT = 6.4
    bc :: FT = 9.0
    cc :: FT = 0.5
end
=#

@inline function œà(a, b, c, Ri)
    œï‚Åª¬π = (1 - b * Ri)^c
    œà_unstable = log((1 + œï‚Åª¬π)^2 * (1 + œï‚Åª¬π^2) / 8) - 2 * atan(œï‚Åª¬π) + œÄ/2

    œà_stable = - a * Ri

    return ifelse(Ri < 0, œà_unstable, œà_stable)
end


@inline function œàu(func::Businger, Ri)
    a = func.au
    b = func.bu
    c = func.cu

    œï‚Åª¬π          = (1 - b * Ri)^c
    œà_convecting = log((1 + œï‚Åª¬π)^2 * (1 + œï‚Åª¬π^2) / 8) - 2 * atan(œï‚Åª¬π) + œÄ/2
    œà_stable     = - a * Ri

    return ifelse(Ri < 0, œà_convecting, œà_stable)
end

@inline function œàc(func::Businger, Ri)
    a = func.ac
    b = func.bc
    c = func.cc

    œï‚Åª¬π          = (1 - b * Ri)^c
    œà_convecting = 2 * log((1 + œï‚Åª¬π) / 2)
    œà_stable     = - a * Ri

    return ifelse(Ri < 0, œà_convecting, œà_stable)
end
    
@inline momentum_flux_scale(f, h, ‚Ñì, Ri) = 1 / (log(h/‚Ñì) - œàu(f, Ri) + œàu(f, ‚Ñì * Ri / h))
@inline   tracer_flux_scale(f, h, ‚Ñì, Ri) = 1 / (log(h/‚Ñì) - œàc(f, Ri) + œàc(f, ‚Ñì * Ri / h))

@inline function virtual_temperature(parameters, state)
    r = parameters.molar_mass_ratio
    Œ¥ = r - 1
    q = state.q
    Œ∏ = state.Œ∏
    return Œ∏ * (1 + Œ¥ * q)
end

function buoyancy_scale(Œ∏‚òÖ, q‚òÖ, surface_state, parameters)
    Œ∏‚òÖ = fluxes.Œ∏
    q‚òÖ = fluxes.q
    ùíØ‚ÇÄ = virtual_temperature(parameters, surface_state)
    q‚ÇÄ = surface_state.q
    Œ∏‚ÇÄ = surface_state.Œ∏
    r = parameters.molar_mass_ratio
    g = parameters.gravitational_acceleration
    Œ¥ = r - 1
    b‚òÖ = g / ùíØ‚ÇÄ * (Œ∏‚òÖ * (1 + Œ¥ * q‚ÇÄ) + Œ¥ * Œ∏‚ÇÄ * q‚òÖ)
    return b‚òÖ
end

function fixed_point_fluxes(u‚òÖ, Œ∏‚òÖ, q‚òÖ,
                            surface_state,
                            inner_length_scales,
                            universal_function,
                            parameters) 

    Œîu = differences.u
    Œîv = differences.v
    ŒîŒ∏ = differences.Œ∏
    Œîq = differences.q

    œ∞ = parameters.von_karman_constant
    f = universal_function

    b‚òÖ = buoyancy_scale(Œ∏‚òÖ, q‚òÖ, surface_state, parameters)
    Ri‚Çï = - œ∞ * h * b‚òÖ / u‚òÖ^2

    ‚Ñìu = inner_length_scales.u(u‚òÖ)
    ‚ÑìŒ∏ = inner_length_scales.Œ∏(u‚òÖ)
    ‚Ñìq = inner_length_scales.q(u‚òÖ)

    œáu = momentum_flux_scale(f, h, ‚Ñìu, Ri‚Çï)
    œáŒ∏ =   tracer_flux_scale(f, h, ‚ÑìŒ∏, Ri‚Çï)
    œáq =   tracer_flux_scale(f, h, ‚Ñìq, Ri‚Çï)

    u‚òÖ = œ∞ * œáu * sqrt(Œîu^2 + Œîv^2)
    Œ∏‚òÖ = œ∞ * œáŒ∏ * ŒîŒ∏
    q‚òÖ = œ∞ * œáq * Œîq

    return u‚òÖ, Œ∏‚òÖ, q‚òÖ
end

@inline function fluxes_not_converged(Œ¥u::FT, Œ¥Œ∏, Œ¥q) where FT
    r = 1e-5
    return (Œ¥u > r) | (Œ¥Œ∏ > r) | (Œ¥q > r)
end

function compute_fluxes(::Val{N},
                        fluxes,
                        differences,
                        surface_state,
                        inner_length_scales,
                        reference_height,
                        universal_function,
                        parameters) where N

    u‚òÖ = fluxes.u
    Œ∏‚òÖ = fluxes.Œ∏
    q‚òÖ = fluxes.q

    Œ¥u = Inf
    Œ¥Œ∏ = Inf
    Œ¥q = Inf
    
    iter = 1

    while fluxes_not_converged(Œ¥u, Œ¥Œ∏, Œ¥q)
        u‚òÖ‚Å∫, Œ∏‚òÖ‚Å∫, q‚òÖ‚Å∫ = fixed_point_fluxes(u‚òÖ, Œ∏‚òÖ, q‚òÖ,
                                           surface_state,
                                           inner_length_scales,
                                           universal_function,
                                           parameters) 

        Œ¥u = u‚òÖ‚Å∫ - u‚òÖ
        Œ¥Œ∏ = Œ∏‚òÖ‚Å∫ - Œ∏‚òÖ
        Œ¥q = q‚òÖ‚Å∫ - q‚òÖ

        u‚òÖ = u‚òÖ‚Å∫
        Œ∏‚òÖ = Œ∏‚òÖ‚Å∫
        q‚òÖ = q‚òÖ‚Å∫ 

        @show iter
        @show u‚òÖ Œ∏‚òÖ q‚òÖ
        @show Œ¥u Œ¥Œ∏ Œ¥q

        iter += 1
    end                         
end

# Test
surface_state = MoistAirState(0.02, 20, 0, 0)
differences   = MoistAirState(0.01,  5, -10, 20)
parameters    = SimilarityParameters() 
h = 2
g = parameters.gravitational_acceleration
Œ± = 0.011

‚Ñìu = SurfaceWaveLength(g, Œ±)
‚ÑìŒ∏ = SurfaceWaveLength(g, Œ±)
‚Ñìq = SurfaceWaveLength(g, Œ±)

length_scales = MoistAirState(‚Ñìq, ‚ÑìŒ∏, ‚Ñìu)

func = Businger()

fluxes = MoistAirState(1e-2, 1e-2, 1e-2)

sol = compute_fluxes(Val(20), fluxes, differences, surface_state,
                     length_scales, h, func, parameters)

